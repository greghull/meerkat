package main

import (
	"bytes"
	"flag"
	"html/template"
	"io"
	"io/ioutil"
	"log"
	"os"
	"path"
	"regexp"

	"github.com/fsnotify/fsnotify"
	"github.com/yuin/goldmark"
	"github.com/yuin/goldmark/ast"
	"github.com/yuin/goldmark/extension"
	"github.com/yuin/goldmark/parser"
	"github.com/yuin/goldmark/renderer/html"
	"github.com/yuin/goldmark/text"
)

// MenuItem is used to build a nav menu for the H1 elements on a page.  Each H1 Element get's
// a link in the nav
type MenuItem struct {
	Text string
	ID   string
}

// PageData is passed to the HTML Template
// Menu is the MenuItem's generated from H1 elements
// Body is the HTML generated by goldmark
type PageData struct {
	Menu []MenuItem
	Body template.HTML
}

var (
	outputDir = flag.String("output", ".", "Directory to write HTML files")
	sourceDir = flag.String("source", ".", "Directory to watch for Markdown files")
	templ     = flag.String("layout", "layout.html", "Layout template for Markdown pages")
	doMinify = flag.Bool("minify", false, "Minify HTML output")

	MarkdownSuffix = regexp.MustCompile(`(?i)\.md$`)

	// If No HTML template is found, this will be used be default.
	htmlText = `
<!DOCTYPE html>
<html>
	<head>
		<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
		<style>
		</style>
	</head>
	<body>
		<nav class="navbar sticky-top navbar-light">
			{{range .Menu}}
			<a class="nav-item nav-link" href="#{{.ID}}">{{.Text}}</a>
			{{end}}
		</nav>
		<div>
			{{.Body}}
		</div>
	</body>
</html>
`
	defaultTemplate = template.Must(template.New("html").Parse(htmlText))
)

func newMarkdown() goldmark.Markdown {
	 return goldmark.New(
		goldmark.WithExtensions(extension.GFM,
			extension.Typographer,
			NewHeaderDivExtension(),
		),
		goldmark.WithParserOptions(
			parser.WithAutoHeadingID(),
		),
		goldmark.WithRendererOptions(
			html.WithUnsafe(),
		),
	)
}

// Builds a menu from the H1 elements in the markdown document
func buildMenu(n ast.Node, source []byte) []MenuItem {
	var menu []MenuItem

		// Walk nodes to find Headers.  H1 elements will be added to the Nav menu
	n = n.FirstChild()
	for n != nil {
		h, ok := n.(*ast.Heading)
		if ok && h.Level == 1 {
			id, found := h.Attribute([]byte("id"))
			if found {
				menu = append(menu, MenuItem{
					string(h.Text(source)),
					string(id.([]byte)),
				})
			}
		}

		n = n.NextSibling()
	}

	return menu
	
}

// io pipe -- reads in Markdown, writes out HTML
func transform(w io.Writer, r io.Reader) error {
	var page PageData

	source,err := ioutil.ReadAll(r)
	if err != nil {
		return err
	}

		// Render the Markdown to HTML in the buffer
	var buf bytes.Buffer
	markdown := newMarkdown()
	n := markdown.Parser().Parse(text.NewReader(source))
	if err := markdown.Renderer().Render(&buf, source, n); err != nil {
		return err
	}
	page.Body = template.HTML(buf.Bytes())
	page.Menu = buildMenu(n, source)
	
	// Attempt to use a template file, otherwise use the built-in template
	t, err := template.ParseFiles(*templ)
	if err != nil {
		t = defaultTemplate
	}

	if *doMinify {
	
	}
	// Finally write it all to the client
	return t.Execute(w, page)
}

// Reads in the specified Markdown file and converts it to HTML
func md2html(filename string) error {
	outFilename := MarkdownSuffix.ReplaceAllString(path.Base(filename), ".html")
	outPath := path.Join(*outputDir, outFilename)
	
	mdFile,err := os.Open(filename)
	if err != nil {
		return err
	}
	defer mdFile.Close()

	htmlFile,err := os.Create(outPath)
	if err != nil {
		return err
	}
	defer htmlFile.Close()

	log.Printf("Converting %s to %s\n", filename, outPath)


	return transform(htmlFile, mdFile)
}

// Watches the source dir, non-recursively, for a file to be changed.
// If the changed filed is a markdown file, then generate a matching
// html file
func watch() error {
	watcher, err := fsnotify.NewWatcher()
	if err != nil {
		return err
	}

	watcher.Add(*sourceDir)

	for {
		select {
		case ev := <- watcher.Events:
			log.Println(ev)
			switch ev.Op {
			case fsnotify.Create:
				if MarkdownSuffix.MatchString(ev.Name) {
					err = md2html(ev.Name)
				}
			case fsnotify.Rename:
				if MarkdownSuffix.MatchString(ev.Name) {
					err = md2html(ev.Name)
				}
			case fsnotify.Write:
				if MarkdownSuffix.MatchString(ev.Name) {
					err = md2html(ev.Name)
				}
			}
			if err != nil {
				log.Println(err)
			}
		case err := <- watcher.Errors:
			return err
		}
	}
}


func main() {
	flag.Parse()

	for _, arg := range flag.Args() {
		if	err := md2html(arg); err != nil {
			log.Println(err)
		}		
	}

	if err := watch(); err != nil {
		log.Println(err)
	}

}
